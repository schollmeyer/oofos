% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/additions_vc_theory.R
\name{add_ufg_constraints}
\alias{add_ufg_constraints}
\title{Add constraint to a VC dimension computation model to compute a better upper
bound for the ufg dimension}
\usage{
add_ufg_constraints(model)
}
\arguments{
\item{model}{is the model that was generated from the function
compute_extent_vc-dimension with a context that represents a set of partial
orders with complemented scaling.}
}
\value{
a model that can be optimized with 'gurobi(.)'. the optimal value of
the optimized model will then be an upper bound for the ufg dimension.
Conjecture: this is not only an upper bound but the exact ufg dimension (i.e.)
}
\description{
'add_ufg_constraints' takes a MILP model that was generated by
the function compute_extent_vc-dimension for a formal context that represents
partial order data (with complemented conceptual scaling) and adds certain
constraints. With this additional constraints one can compute (with
'gurobi(.)') a better upper bound for the ufg dimension. the ufg dimension is
the largest cardinality of an ufg premise. Here, in fact the context of ALL
partial orders is assumed as the underlying large context). Concretely,
for a pair '(a,b)' it is implemented that if (a,b) is used as a distinguishing
attribute, then '(b,a)' and 'not (a,b)' and 'not (b,a)' can not be used as a
further distinguishing attribute for the envisaged ufg premise, cf., the
notes in the ISPITA paper
}
