% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/additions_vc_theory.R
\name{add_ufg_constraints}
\alias{add_ufg_constraints}
\title{Add constraint to a VC dimension computation model to compute a better upper
bound for the ufg dimension}
\usage{
add_ufg_constraints(model)
}
\arguments{
\item{model}{is the model that was generated from the function
compute_extent_vc-dimension with a context that represents a set of partial
orders with complemented scaling.}
}
\value{
a model that can be optimized with 'gurobi(.)'. the optimal value of
the optimized model will then be an upper bound for the ufg dimension.
Conjecture: this is not only an upper bound but the exact ufg dimension

The contranominal scale that represents the shatterable set of maximal
cardinality, that is possibly also an ufg premise - attribute pair,
can be obtained from the model with '$x'. This vector is a 0-1 vector of
length number_objects + number_attributes which represents the objects
concatenated with the attributes.
}
\description{
'add_ufg_constraints' takes a MILP model that was generated by
the function compute_extent_vc-dimension for a formal context that represents
partial order data (with complemented conceptual scaling) and adds certain
constraints. With this additional constraints one can compute (with
'gurobi(.)') a better upper bound for the ufg dimension. the ufg dimension is
the largest cardinality of an ufg premise. Here, in fact the context of ALL
partial orders is assumed as the underlying large context). Concretely,
for a pair '(a,b)' it is implemented that if (a,b) is used as a
distinguishing attribute, then '(b,a)' and 'not (a,b)' and 'not (b,a)' cannot
be used as a further distinguishing attribute for the envisaged ufg premise,
cf., the notes in the ISPITA paper
}
\examples{
\dontrun{
context <- ddandrda::compute_all_partial_orders(4,
  list = FALSE,
  complemented = TRUE
)
model <- compute_extent_vc_dimension(context)
vc_dimension <- gurobi::gurobi(model)$objval
vc_dimension
# [1] 12  This fits to VC dimension = m(m-1) with m the number of items
ufg_model <- add_ufg_constraints(model)
ufg_upper_bound <- gurobi::gurobi(ufg_model)$objval
ufg_upper_bound
# [1] 6  Fits to ufg dimension = m(m-1)/2 with m the number of items
# NOTE: We only proved ufg dimension <= m(m-1)/2 but the proof for equality
# seems to be simple? ... TODO !

ufg_prem <- which(gurobi::gurobi(ufg_model)$x[seq_len(nrow(context))] == 1)
ufg_prem
# [1]   2  35  41  99 120 168 partial orders 2,35,41,99,120 and 168 build a
# ufg premise of maximal cardinality (thus, here the ufg dimension is 6)
}
}
